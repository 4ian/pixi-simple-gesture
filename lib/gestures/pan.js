'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = panable;
function panable(sprite, inertia) {

  function mouseDown(e) {
    start(e.data.originalEvent);
  }

  function touchStart(e) {
    if (e.data.originalEvent.targetTouches && e.data.originalEvent.targetTouches[0]) {
      start(e.data.originalEvent.targetTouches[0]);
    }
  }

  function start(t) {
    if (sprite._pan) {
      if (!sprite._pan.intervalId) {
        return;
      }
      clearInterval(sprite._pan.intervalId);
      sprite.emit('panend');
    }
    sprite._pan = {
      p: {
        x: t.clientX,
        y: t.clientY,
        date: new Date()
      }
    };
    sprite.on('mousemove', mouseMove).on('touchmove', touchMove);
  }

  function mouseMove(e) {
    move(e, e.data.originalEvent);
  }

  function touchMove(e) {
    var t = e.data.originalEvent.targetTouches;
    if (!t || t.length > 1) {
      end(e, t[0]);
      return;
    }
    move(e, t[0]);
  }

  function move(e, t) {
    var now = new Date();
    var interval = now - sprite._pan.p.date;
    if (interval < 12) {
      return;
    }
    var dx = t.clientX - sprite._pan.p.x;
    var dy = t.clientY - sprite._pan.p.y;
    var distance = Math.sqrt(dx * dx + dy * dy);
    if (!sprite._pan.pp) {
      var threshold = t instanceof window.MouseEvent ? 2 : 7;
      if (distance > threshold) {
        sprite.emit('panstart');
      } else {
        return;
      }
    } else {
      var event = {
        deltaX: dx,
        deltaY: dy,
        velocity: distance / interval,
        data: e.data
      };
      sprite.emit('panmove', event);
    }
    sprite._pan.pp = {
      x: sprite._pan.p.x,
      y: sprite._pan.p.y,
      date: sprite._pan.p.date
    };
    sprite._pan.p = {
      x: t.clientX,
      y: t.clientY,
      date: now
    };
  }

  function mouseUp(e) {
    end(e, e.data.originalEvent);
  }

  function touchEnd(e) {
    end(e, e.data.originalEvent.changedTouches[0]);
  }

  function end(e, t) {
    sprite.removeListener('mousemove', mouseMove).removeListener('touchmove', touchMove);
    if (!sprite._pan || !sprite._pan.pp) {
      sprite._pan = null;
      return;
    }
    if (inertia) {
      if (sprite._pan.intervalId) {
        return;
      }
      var interval = new Date() - sprite._pan.pp.date;
      var vx = (t.clientX - sprite._pan.pp.x) / interval;
      var vy = (t.clientY - sprite._pan.pp.y) / interval;
      sprite._pan.intervalId = setInterval(function () {
        if (Math.abs(vx) < 0.04 && Math.abs(vy) < 0.04) {
          clearInterval(sprite._pan.intervalId);
          sprite.emit('panend');
          sprite._pan = null;
          return;
        }
        var touch = {
          clientX: sprite._pan.p.x + vx * 12,
          clientY: sprite._pan.p.y + vy * 12
        };
        move(e, touch);
        vx *= 0.9;
        vy *= 0.9;
      }, 12);
    } else {
      sprite.emit('panend');
      sprite._pan = null;
    }
  }

  sprite.interactive = true;
  sprite.on('mousedown', mouseDown).on('touchstart', touchStart).on('mouseup', mouseUp).on('mouseupoutside', mouseUp).on('touchend', touchEnd).on('touchendoutside', touchEnd);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,